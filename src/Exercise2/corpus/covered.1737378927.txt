/Users/gurkiratsingh/Desktop/Fuzzing Exercises/src/Exercise2/testToken.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.0;
  3 |     | 
  4 |     | import "./token.sol";
  5 |     | 
  6 |     | // pause i called at deployment
  7 |     | // Remove Ownership
  8 |     | 
  9 |     | 
 10 | *r  | contract testToken is Token {
 11 |     | 
 12 |     |     // address constant USER_1 = 0x9876543210987654321098765432109876543210;
 13 | *   |     constructor () {
 14 | *   |         paused();
 15 | *   |         owner = address(0);
 16 |     | 
 17 |     |     }
 18 |     | 
 19 |     |     // function echidna_test_cannot_be_unpaused() public view returns(bool) {
 20 |     |     //     return balances[USER_1] == 0;
 21 |     |     // }
 22 |     | 
 23 |     |     function echidna_unpause() public view returns(bool){
 24 |     |         return (paused() == true);
 25 |     |     }
 26 |     | }

/Users/gurkiratsingh/Desktop/Fuzzing Exercises/src/Exercise2/token.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.0;
  3 |     | 
  4 |     | contract Ownable {
  5 | *   |     address public owner = msg.sender;
  6 |     |     // @audit To fix the bug we should only remove the below function  
  7 |     | 
  8 |     | 
  9 |     |     // function Owner() public {
 10 |     |     //     owner = msg.sender;
 11 |     |     // }
 12 |     | 
 13 |     |     modifier onlyOwner() {
 14 | *r  |         require(owner == msg.sender);
 15 |     |         _;
 16 |     |     }
 17 |     | }
 18 |     | 
 19 |     | contract Pausable is Ownable {
 20 |     |     bool private _paused;
 21 |     | 
 22 | *   |     function paused() public view returns (bool) {
 23 | *   |         return _paused;
 24 |     |     }
 25 |     | 
 26 | *   |     function pause() public onlyOwner {
 27 |     |         _paused = true;
 28 |     |     }
 29 |     | 
 30 | *   |     function resume() public onlyOwner {
 31 |     |         _paused = false;
 32 |     |     }
 33 |     | 
 34 |     |     modifier whenNotPaused() {
 35 | *   |         require(!_paused, "Pausable: Contract is paused.");
 36 |     |         _;
 37 |     |     }
 38 |     | }
 39 |     | 
 40 |     | contract Token is Ownable, Pausable {
 41 | *   |     mapping(address => uint256) public balances;
 42 |     | 
 43 | *   |     function transfer(address to, uint256 value) public whenNotPaused {
 44 | *   |         balances[msg.sender] -= value;
 45 | *   |         balances[to] += value;
 46 |     |     }
 47 |     | }

