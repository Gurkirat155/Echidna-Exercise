/Users/gurkiratsingh/Desktop/Fuzzing Exercises/src/Exercise2/testToken.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.0;
  3 |     | 
  4 |     | import "./token.sol";
  5 |     | 
  6 |     | // pause i called at deployment
  7 |     | // Remove Ownership
  8 |     | 
  9 |     | 
 10 | *r  | contract testToken is Token {
 11 |     | 
 12 |     |     // address constant USER_1 = 0x9876543210987654321098765432109876543210;
 13 | *   |     constructor () {
 14 | *   |         paused();
 15 | *   |         owner = address(0);
 16 |     | 
 17 |     |     }
 18 |     | 
 19 |     |     // function echidna_test_cannot_be_unpaused() public view returns(bool) {
 20 |     |     //     return balances[USER_1] == 0;
 21 |     |     // }
 22 |     | 
 23 |     |     function echidna_unpause() public view returns(bool){
 24 |     |         return (paused() == true);
 25 |     |     }
 26 |     | }

/Users/gurkiratsingh/Desktop/Fuzzing Exercises/src/Exercise2/token.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.0;
  3 |     | 
  4 |     | contract Ownable {
  5 | *   |     address public owner = msg.sender;
  6 |     | 
  7 | *   |     function Owner() public {
  8 | *   |         owner = msg.sender;
  9 |     |     }
 10 |     | 
 11 |     |     modifier onlyOwner() {
 12 | *r  |         require(owner == msg.sender);
 13 |     |         _;
 14 |     |     }
 15 |     | }
 16 |     | 
 17 |     | contract Pausable is Ownable {
 18 |     |     bool private _paused;
 19 |     | 
 20 | *   |     function paused() public view returns (bool) {
 21 | *   |         return _paused;
 22 |     |     }
 23 |     | 
 24 | *   |     function pause() public onlyOwner {
 25 | *   |         _paused = true;
 26 |     |     }
 27 |     | 
 28 | *   |     function resume() public onlyOwner {
 29 | *   |         _paused = false;
 30 |     |     }
 31 |     | 
 32 |     |     modifier whenNotPaused() {
 33 | *r  |         require(!_paused, "Pausable: Contract is paused.");
 34 |     |         _;
 35 |     |     }
 36 |     | }
 37 |     | 
 38 |     | contract Token is Ownable, Pausable {
 39 | *   |     mapping(address => uint256) public balances;
 40 |     | 
 41 | *   |     function transfer(address to, uint256 value) public whenNotPaused {
 42 | *   |         balances[msg.sender] -= value;
 43 | *   |         balances[to] += value;
 44 |     |     }
 45 |     | }

