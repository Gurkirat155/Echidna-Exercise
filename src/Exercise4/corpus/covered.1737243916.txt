/Users/gurkiratsingh/Desktop/Fuzzing Exercises/src/Exercise4/testToken.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.0;
  3 |     | 
  4 |     | import "./token.sol";
  5 |     | 
  6 | *r  | contract testToken is Token {
  7 |     |     
  8 | *   |     function transfer(address to, uint256 value) public override{
  9 | *   |         uint256 intialBalOfSender = balances[msg.sender];
 10 | *   |         uint256 intialBalOfReciever = balances[to];
 11 | *   |         super.transfer(to,value);
 12 | *   |         assert(intialBalOfSender >= balances[msg.sender]);
 13 | *   |         assert(intialBalOfReciever <= balances[to]);
 14 |     |     }
 15 |     | }

/Users/gurkiratsingh/Desktop/Fuzzing Exercises/src/Exercise4/token.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.0;
  3 |     | 
  4 |     | contract Ownable {
  5 | *   |     address public owner = msg.sender;
  6 |     | 
  7 | *   |     function transferOwnership(address newOwner) public onlyOwner {
  8 | *   |         owner = newOwner;
  9 |     |     }
 10 |     | 
 11 |     |     modifier onlyOwner() {
 12 | *r  |         require(msg.sender == owner, "Ownable: Caller is not the owner.");
 13 |     |         _;
 14 |     |     }
 15 |     | }
 16 |     | 
 17 |     | contract Pausable is Ownable {
 18 |     |     bool private _paused;
 19 |     | 
 20 | *   |     function paused() public view returns (bool) {
 21 | *   |         return _paused;
 22 |     |     }
 23 |     | 
 24 | *   |     function pause() public onlyOwner {
 25 | *   |         _paused = true;
 26 |     |     }
 27 |     | 
 28 | *   |     function resume() public onlyOwner {
 29 | *   |         _paused = false;
 30 |     |     }
 31 |     | 
 32 |     |     modifier whenNotPaused() {
 33 | *r  |         require(!_paused, "Pausable: Contract is paused.");
 34 |     |         _;
 35 |     |     }
 36 |     | }
 37 |     | 
 38 |     | contract Token is Ownable, Pausable {
 39 |     | 
 40 | *   |     mapping(address => uint256) public balances;
 41 |     | 
 42 | *   |     function transfer(address to, uint256 value) public virtual whenNotPaused {
 43 |     |         // require(balances[msg.sender] >= value ,"Insuffcient balance") ;
 44 |     |         // @audit just remove the unchecked keyword or add reuiqre statement above to check underflow and overflow 
 45 |     |         // unchecked to save gas
 46 |     |         unchecked {
 47 | *   |             balances[msg.sender] -= value;
 48 | *   |             balances[to] += value;
 49 |     |         }
 50 |     |     }
 51 |     | }
 52 |     | 
 53 |     | // @audit here there could be underflow issue for line 44,45
 54 |     | // msg.sender must have its initial balance or less.
 55 |     | // to must have its initial balance or more.

