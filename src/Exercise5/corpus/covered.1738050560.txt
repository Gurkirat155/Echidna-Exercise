/Users/gurkiratsingh/Desktop/Fuzzing Exercises/lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | // OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC6093.sol)
   3 |     | pragma solidity ^0.8.20;
   4 |     | 
   5 |     | /**
   6 |     |  * @dev Standard ERC-20 Errors
   7 |     |  * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.
   8 |     |  */
   9 |     | interface IERC20Errors {
  10 |     |     /**
  11 |     |      * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.
  12 |     |      * @param sender Address whose tokens are being transferred.
  13 |     |      * @param balance Current balance for the interacting account.
  14 |     |      * @param needed Minimum amount required to perform a transfer.
  15 |     |      */
  16 |     |     error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);
  17 |     | 
  18 |     |     /**
  19 |     |      * @dev Indicates a failure with the token `sender`. Used in transfers.
  20 |     |      * @param sender Address whose tokens are being transferred.
  21 |     |      */
  22 |     |     error ERC20InvalidSender(address sender);
  23 |     | 
  24 |     |     /**
  25 |     |      * @dev Indicates a failure with the token `receiver`. Used in transfers.
  26 |     |      * @param receiver Address to which tokens are being transferred.
  27 |     |      */
  28 |     |     error ERC20InvalidReceiver(address receiver);
  29 |     | 
  30 |     |     /**
  31 |     |      * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.
  32 |     |      * @param spender Address that may be allowed to operate on tokens without being their owner.
  33 |     |      * @param allowance Amount of tokens a `spender` is allowed to operate with.
  34 |     |      * @param needed Minimum amount required to perform a transfer.
  35 |     |      */
  36 |     |     error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);
  37 |     | 
  38 |     |     /**
  39 |     |      * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.
  40 |     |      * @param approver Address initiating an approval operation.
  41 |     |      */
  42 |     |     error ERC20InvalidApprover(address approver);
  43 |     | 
  44 |     |     /**
  45 |     |      * @dev Indicates a failure with the `spender` to be approved. Used in approvals.
  46 |     |      * @param spender Address that may be allowed to operate on tokens without being their owner.
  47 |     |      */
  48 |     |     error ERC20InvalidSpender(address spender);
  49 |     | }
  50 |     | 
  51 |     | /**
  52 |     |  * @dev Standard ERC-721 Errors
  53 |     |  * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.
  54 |     |  */
  55 |     | interface IERC721Errors {
  56 |     |     /**
  57 |     |      * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.
  58 |     |      * Used in balance queries.
  59 |     |      * @param owner Address of the current owner of a token.
  60 |     |      */
  61 |     |     error ERC721InvalidOwner(address owner);
  62 |     | 
  63 |     |     /**
  64 |     |      * @dev Indicates a `tokenId` whose `owner` is the zero address.
  65 |     |      * @param tokenId Identifier number of a token.
  66 |     |      */
  67 |     |     error ERC721NonexistentToken(uint256 tokenId);
  68 |     | 
  69 |     |     /**
  70 |     |      * @dev Indicates an error related to the ownership over a particular token. Used in transfers.
  71 |     |      * @param sender Address whose tokens are being transferred.
  72 |     |      * @param tokenId Identifier number of a token.
  73 |     |      * @param owner Address of the current owner of a token.
  74 |     |      */
  75 |     |     error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);
  76 |     | 
  77 |     |     /**
  78 |     |      * @dev Indicates a failure with the token `sender`. Used in transfers.
  79 |     |      * @param sender Address whose tokens are being transferred.
  80 |     |      */
  81 |     |     error ERC721InvalidSender(address sender);
  82 |     | 
  83 |     |     /**
  84 |     |      * @dev Indicates a failure with the token `receiver`. Used in transfers.
  85 |     |      * @param receiver Address to which tokens are being transferred.
  86 |     |      */
  87 |     |     error ERC721InvalidReceiver(address receiver);
  88 |     | 
  89 |     |     /**
  90 |     |      * @dev Indicates a failure with the `operator`’s approval. Used in transfers.
  91 |     |      * @param operator Address that may be allowed to operate on tokens without being their owner.
  92 |     |      * @param tokenId Identifier number of a token.
  93 |     |      */
  94 |     |     error ERC721InsufficientApproval(address operator, uint256 tokenId);
  95 |     | 
  96 |     |     /**
  97 |     |      * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.
  98 |     |      * @param approver Address initiating an approval operation.
  99 |     |      */
 100 |     |     error ERC721InvalidApprover(address approver);
 101 |     | 
 102 |     |     /**
 103 |     |      * @dev Indicates a failure with the `operator` to be approved. Used in approvals.
 104 |     |      * @param operator Address that may be allowed to operate on tokens without being their owner.
 105 |     |      */
 106 |     |     error ERC721InvalidOperator(address operator);
 107 |     | }
 108 |     | 
 109 |     | /**
 110 |     |  * @dev Standard ERC-1155 Errors
 111 |     |  * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.
 112 |     |  */
 113 |     | interface IERC1155Errors {
 114 |     |     /**
 115 |     |      * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.
 116 |     |      * @param sender Address whose tokens are being transferred.
 117 |     |      * @param balance Current balance for the interacting account.
 118 |     |      * @param needed Minimum amount required to perform a transfer.
 119 |     |      * @param tokenId Identifier number of a token.
 120 |     |      */
 121 |     |     error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);
 122 |     | 
 123 |     |     /**
 124 |     |      * @dev Indicates a failure with the token `sender`. Used in transfers.
 125 |     |      * @param sender Address whose tokens are being transferred.
 126 |     |      */
 127 |     |     error ERC1155InvalidSender(address sender);
 128 |     | 
 129 |     |     /**
 130 |     |      * @dev Indicates a failure with the token `receiver`. Used in transfers.
 131 |     |      * @param receiver Address to which tokens are being transferred.
 132 |     |      */
 133 |     |     error ERC1155InvalidReceiver(address receiver);
 134 |     | 
 135 |     |     /**
 136 |     |      * @dev Indicates a failure with the `operator`’s approval. Used in transfers.
 137 |     |      * @param operator Address that may be allowed to operate on tokens without being their owner.
 138 |     |      * @param owner Address of the current owner of a token.
 139 |     |      */
 140 |     |     error ERC1155MissingApprovalForAll(address operator, address owner);
 141 |     | 
 142 |     |     /**
 143 |     |      * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.
 144 |     |      * @param approver Address initiating an approval operation.
 145 |     |      */
 146 |     |     error ERC1155InvalidApprover(address approver);
 147 |     | 
 148 |     |     /**
 149 |     |      * @dev Indicates a failure with the `operator` to be approved. Used in approvals.
 150 |     |      * @param operator Address that may be allowed to operate on tokens without being their owner.
 151 |     |      */
 152 |     |     error ERC1155InvalidOperator(address operator);
 153 |     | 
 154 |     |     /**
 155 |     |      * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.
 156 |     |      * Used in batch transfers.
 157 |     |      * @param idsLength Length of the array of token identifiers
 158 |     |      * @param valuesLength Length of the array of token amounts
 159 |     |      */
 160 |     |     error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);
 161 |     | }
 162 |     | 

/Users/gurkiratsingh/Desktop/Fuzzing Exercises/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | // OpenZeppelin Contracts (last updated v5.2.0) (token/ERC20/ERC20.sol)
   3 |     | 
   4 |     | pragma solidity ^0.8.20;
   5 |     | 
   6 |     | import {IERC20} from "./IERC20.sol";
   7 |     | import {IERC20Metadata} from "./extensions/IERC20Metadata.sol";
   8 |     | import {Context} from "../../utils/Context.sol";
   9 |     | import {IERC20Errors} from "../../interfaces/draft-IERC6093.sol";
  10 |     | 
  11 |     | /**
  12 |     |  * @dev Implementation of the {IERC20} interface.
  13 |     |  *
  14 |     |  * This implementation is agnostic to the way tokens are created. This means
  15 |     |  * that a supply mechanism has to be added in a derived contract using {_mint}.
  16 |     |  *
  17 |     |  * TIP: For a detailed writeup see our guide
  18 |     |  * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How
  19 |     |  * to implement supply mechanisms].
  20 |     |  *
  21 |     |  * The default value of {decimals} is 18. To change this, you should override
  22 |     |  * this function so it returns a different value.
  23 |     |  *
  24 |     |  * We have followed general OpenZeppelin Contracts guidelines: functions revert
  25 |     |  * instead returning `false` on failure. This behavior is nonetheless
  26 |     |  * conventional and does not conflict with the expectations of ERC-20
  27 |     |  * applications.
  28 |     |  */
  29 |     | abstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {
  30 |     |     mapping(address account => uint256) private _balances;
  31 |     | 
  32 |     |     mapping(address account => mapping(address spender => uint256)) private _allowances;
  33 |     | 
  34 |     |     uint256 private _totalSupply;
  35 |     | 
  36 |     |     string private _name;
  37 |     |     string private _symbol;
  38 |     | 
  39 |     |     /**
  40 |     |      * @dev Sets the values for {name} and {symbol}.
  41 |     |      *
  42 |     |      * All two of these values are immutable: they can only be set once during
  43 |     |      * construction.
  44 |     |      */
  45 |     |     constructor(string memory name_, string memory symbol_) {
  46 |     |         _name = name_;
  47 |     |         _symbol = symbol_;
  48 |     |     }
  49 |     | 
  50 |     |     /**
  51 |     |      * @dev Returns the name of the token.
  52 |     |      */
  53 |     |     function name() public view virtual returns (string memory) {
  54 |     |         return _name;
  55 |     |     }
  56 |     | 
  57 |     |     /**
  58 |     |      * @dev Returns the symbol of the token, usually a shorter version of the
  59 |     |      * name.
  60 |     |      */
  61 |     |     function symbol() public view virtual returns (string memory) {
  62 |     |         return _symbol;
  63 |     |     }
  64 |     | 
  65 |     |     /**
  66 |     |      * @dev Returns the number of decimals used to get its user representation.
  67 |     |      * For example, if `decimals` equals `2`, a balance of `505` tokens should
  68 |     |      * be displayed to a user as `5.05` (`505 / 10 ** 2`).
  69 |     |      *
  70 |     |      * Tokens usually opt for a value of 18, imitating the relationship between
  71 |     |      * Ether and Wei. This is the default value returned by this function, unless
  72 |     |      * it's overridden.
  73 |     |      *
  74 |     |      * NOTE: This information is only used for _display_ purposes: it in
  75 |     |      * no way affects any of the arithmetic of the contract, including
  76 |     |      * {IERC20-balanceOf} and {IERC20-transfer}.
  77 |     |      */
  78 |     |     function decimals() public view virtual returns (uint8) {
  79 |     |         return 18;
  80 |     |     }
  81 |     | 
  82 |     |     /**
  83 |     |      * @dev See {IERC20-totalSupply}.
  84 |     |      */
  85 |     |     function totalSupply() public view virtual returns (uint256) {
  86 |     |         return _totalSupply;
  87 |     |     }
  88 |     | 
  89 |     |     /**
  90 |     |      * @dev See {IERC20-balanceOf}.
  91 |     |      */
  92 |     |     function balanceOf(address account) public view virtual returns (uint256) {
  93 |     |         return _balances[account];
  94 |     |     }
  95 |     | 
  96 |     |     /**
  97 |     |      * @dev See {IERC20-transfer}.
  98 |     |      *
  99 |     |      * Requirements:
 100 |     |      *
 101 |     |      * - `to` cannot be the zero address.
 102 |     |      * - the caller must have a balance of at least `value`.
 103 |     |      */
 104 |     |     function transfer(address to, uint256 value) public virtual returns (bool) {
 105 |     |         address owner = _msgSender();
 106 |     |         _transfer(owner, to, value);
 107 |     |         return true;
 108 |     |     }
 109 |     | 
 110 |     |     /**
 111 |     |      * @dev See {IERC20-allowance}.
 112 |     |      */
 113 |     |     function allowance(address owner, address spender) public view virtual returns (uint256) {
 114 |     |         return _allowances[owner][spender];
 115 |     |     }
 116 |     | 
 117 |     |     /**
 118 |     |      * @dev See {IERC20-approve}.
 119 |     |      *
 120 |     |      * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on
 121 |     |      * `transferFrom`. This is semantically equivalent to an infinite approval.
 122 |     |      *
 123 |     |      * Requirements:
 124 |     |      *
 125 |     |      * - `spender` cannot be the zero address.
 126 |     |      */
 127 |     |     function approve(address spender, uint256 value) public virtual returns (bool) {
 128 |     |         address owner = _msgSender();
 129 |     |         _approve(owner, spender, value);
 130 |     |         return true;
 131 |     |     }
 132 |     | 
 133 |     |     /**
 134 |     |      * @dev See {IERC20-transferFrom}.
 135 |     |      *
 136 |     |      * Skips emitting an {Approval} event indicating an allowance update. This is not
 137 |     |      * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].
 138 |     |      *
 139 |     |      * NOTE: Does not update the allowance if the current allowance
 140 |     |      * is the maximum `uint256`.
 141 |     |      *
 142 |     |      * Requirements:
 143 |     |      *
 144 |     |      * - `from` and `to` cannot be the zero address.
 145 |     |      * - `from` must have a balance of at least `value`.
 146 |     |      * - the caller must have allowance for ``from``'s tokens of at least
 147 |     |      * `value`.
 148 |     |      */
 149 |     |     function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {
 150 |     |         address spender = _msgSender();
 151 |     |         _spendAllowance(from, spender, value);
 152 |     |         _transfer(from, to, value);
 153 |     |         return true;
 154 |     |     }
 155 |     | 
 156 |     |     /**
 157 |     |      * @dev Moves a `value` amount of tokens from `from` to `to`.
 158 |     |      *
 159 |     |      * This internal function is equivalent to {transfer}, and can be used to
 160 |     |      * e.g. implement automatic token fees, slashing mechanisms, etc.
 161 |     |      *
 162 |     |      * Emits a {Transfer} event.
 163 |     |      *
 164 |     |      * NOTE: This function is not virtual, {_update} should be overridden instead.
 165 |     |      */
 166 |     |     function _transfer(address from, address to, uint256 value) internal {
 167 |     |         if (from == address(0)) {
 168 |     |             revert ERC20InvalidSender(address(0));
 169 |     |         }
 170 |     |         if (to == address(0)) {
 171 |     |             revert ERC20InvalidReceiver(address(0));
 172 |     |         }
 173 |     |         _update(from, to, value);
 174 |     |     }
 175 |     | 
 176 |     |     /**
 177 |     |      * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`
 178 |     |      * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding
 179 |     |      * this function.
 180 |     |      *
 181 |     |      * Emits a {Transfer} event.
 182 |     |      */
 183 |     |     function _update(address from, address to, uint256 value) internal virtual {
 184 |     |         if (from == address(0)) {
 185 |     |             // Overflow check required: The rest of the code assumes that totalSupply never overflows
 186 |     |             _totalSupply += value;
 187 |     |         } else {
 188 |     |             uint256 fromBalance = _balances[from];
 189 |     |             if (fromBalance < value) {
 190 |     |                 revert ERC20InsufficientBalance(from, fromBalance, value);
 191 |     |             }
 192 |     |             unchecked {
 193 |     |                 // Overflow not possible: value <= fromBalance <= totalSupply.
 194 |     |                 _balances[from] = fromBalance - value;
 195 |     |             }
 196 |     |         }
 197 |     | 
 198 |     |         if (to == address(0)) {
 199 |     |             unchecked {
 200 |     |                 // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.
 201 |     |                 _totalSupply -= value;
 202 |     |             }
 203 |     |         } else {
 204 |     |             unchecked {
 205 |     |                 // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.
 206 |     |                 _balances[to] += value;
 207 |     |             }
 208 |     |         }
 209 |     | 
 210 |     |         emit Transfer(from, to, value);
 211 |     |     }
 212 |     | 
 213 |     |     /**
 214 |     |      * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).
 215 |     |      * Relies on the `_update` mechanism
 216 |     |      *
 217 |     |      * Emits a {Transfer} event with `from` set to the zero address.
 218 |     |      *
 219 |     |      * NOTE: This function is not virtual, {_update} should be overridden instead.
 220 |     |      */
 221 |     |     function _mint(address account, uint256 value) internal {
 222 |     |         if (account == address(0)) {
 223 |     |             revert ERC20InvalidReceiver(address(0));
 224 |     |         }
 225 |     |         _update(address(0), account, value);
 226 |     |     }
 227 |     | 
 228 |     |     /**
 229 |     |      * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.
 230 |     |      * Relies on the `_update` mechanism.
 231 |     |      *
 232 |     |      * Emits a {Transfer} event with `to` set to the zero address.
 233 |     |      *
 234 |     |      * NOTE: This function is not virtual, {_update} should be overridden instead
 235 |     |      */
 236 |     |     function _burn(address account, uint256 value) internal {
 237 |     |         if (account == address(0)) {
 238 |     |             revert ERC20InvalidSender(address(0));
 239 |     |         }
 240 |     |         _update(account, address(0), value);
 241 |     |     }
 242 |     | 
 243 |     |     /**
 244 |     |      * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.
 245 |     |      *
 246 |     |      * This internal function is equivalent to `approve`, and can be used to
 247 |     |      * e.g. set automatic allowances for certain subsystems, etc.
 248 |     |      *
 249 |     |      * Emits an {Approval} event.
 250 |     |      *
 251 |     |      * Requirements:
 252 |     |      *
 253 |     |      * - `owner` cannot be the zero address.
 254 |     |      * - `spender` cannot be the zero address.
 255 |     |      *
 256 |     |      * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.
 257 |     |      */
 258 |     |     function _approve(address owner, address spender, uint256 value) internal {
 259 |     |         _approve(owner, spender, value, true);
 260 |     |     }
 261 |     | 
 262 |     |     /**
 263 |     |      * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.
 264 |     |      *
 265 |     |      * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by
 266 |     |      * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any
 267 |     |      * `Approval` event during `transferFrom` operations.
 268 |     |      *
 269 |     |      * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to
 270 |     |      * true using the following override:
 271 |     |      *
 272 |     |      * ```solidity
 273 |     |      * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {
 274 |     |      *     super._approve(owner, spender, value, true);
 275 |     |      * }
 276 |     |      * ```
 277 |     |      *
 278 |     |      * Requirements are the same as {_approve}.
 279 |     |      */
 280 |     |     function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {
 281 |     |         if (owner == address(0)) {
 282 |     |             revert ERC20InvalidApprover(address(0));
 283 |     |         }
 284 |     |         if (spender == address(0)) {
 285 |     |             revert ERC20InvalidSpender(address(0));
 286 |     |         }
 287 |     |         _allowances[owner][spender] = value;
 288 |     |         if (emitEvent) {
 289 |     |             emit Approval(owner, spender, value);
 290 |     |         }
 291 |     |     }
 292 |     | 
 293 |     |     /**
 294 |     |      * @dev Updates `owner` s allowance for `spender` based on spent `value`.
 295 |     |      *
 296 |     |      * Does not update the allowance value in case of infinite allowance.
 297 |     |      * Revert if not enough allowance is available.
 298 |     |      *
 299 |     |      * Does not emit an {Approval} event.
 300 |     |      */
 301 |     |     function _spendAllowance(address owner, address spender, uint256 value) internal virtual {
 302 |     |         uint256 currentAllowance = allowance(owner, spender);
 303 |     |         if (currentAllowance < type(uint256).max) {
 304 |     |             if (currentAllowance < value) {
 305 |     |                 revert ERC20InsufficientAllowance(spender, currentAllowance, value);
 306 |     |             }
 307 |     |             unchecked {
 308 |     |                 _approve(owner, spender, currentAllowance - value, false);
 309 |     |             }
 310 |     |         }
 311 |     |     }
 312 |     | }
 313 |     | 

/Users/gurkiratsingh/Desktop/Fuzzing Exercises/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)
  3 |     | 
  4 |     | pragma solidity ^0.8.20;
  5 |     | 
  6 |     | /**
  7 |     |  * @dev Interface of the ERC-20 standard as defined in the ERC.
  8 |     |  */
  9 |     | interface IERC20 {
 10 |     |     /**
 11 |     |      * @dev Emitted when `value` tokens are moved from one account (`from`) to
 12 |     |      * another (`to`).
 13 |     |      *
 14 |     |      * Note that `value` may be zero.
 15 |     |      */
 16 |     |     event Transfer(address indexed from, address indexed to, uint256 value);
 17 |     | 
 18 |     |     /**
 19 |     |      * @dev Emitted when the allowance of a `spender` for an `owner` is set by
 20 |     |      * a call to {approve}. `value` is the new allowance.
 21 |     |      */
 22 |     |     event Approval(address indexed owner, address indexed spender, uint256 value);
 23 |     | 
 24 |     |     /**
 25 |     |      * @dev Returns the value of tokens in existence.
 26 |     |      */
 27 |     |     function totalSupply() external view returns (uint256);
 28 |     | 
 29 |     |     /**
 30 |     |      * @dev Returns the value of tokens owned by `account`.
 31 |     |      */
 32 |     |     function balanceOf(address account) external view returns (uint256);
 33 |     | 
 34 |     |     /**
 35 |     |      * @dev Moves a `value` amount of tokens from the caller's account to `to`.
 36 |     |      *
 37 |     |      * Returns a boolean value indicating whether the operation succeeded.
 38 |     |      *
 39 |     |      * Emits a {Transfer} event.
 40 |     |      */
 41 |     |     function transfer(address to, uint256 value) external returns (bool);
 42 |     | 
 43 |     |     /**
 44 |     |      * @dev Returns the remaining number of tokens that `spender` will be
 45 |     |      * allowed to spend on behalf of `owner` through {transferFrom}. This is
 46 |     |      * zero by default.
 47 |     |      *
 48 |     |      * This value changes when {approve} or {transferFrom} are called.
 49 |     |      */
 50 |     |     function allowance(address owner, address spender) external view returns (uint256);
 51 |     | 
 52 |     |     /**
 53 |     |      * @dev Sets a `value` amount of tokens as the allowance of `spender` over the
 54 |     |      * caller's tokens.
 55 |     |      *
 56 |     |      * Returns a boolean value indicating whether the operation succeeded.
 57 |     |      *
 58 |     |      * IMPORTANT: Beware that changing an allowance with this method brings the risk
 59 |     |      * that someone may use both the old and the new allowance by unfortunate
 60 |     |      * transaction ordering. One possible solution to mitigate this race
 61 |     |      * condition is to first reduce the spender's allowance to 0 and set the
 62 |     |      * desired value afterwards:
 63 |     |      * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
 64 |     |      *
 65 |     |      * Emits an {Approval} event.
 66 |     |      */
 67 |     |     function approve(address spender, uint256 value) external returns (bool);
 68 |     | 
 69 |     |     /**
 70 |     |      * @dev Moves a `value` amount of tokens from `from` to `to` using the
 71 |     |      * allowance mechanism. `value` is then deducted from the caller's
 72 |     |      * allowance.
 73 |     |      *
 74 |     |      * Returns a boolean value indicating whether the operation succeeded.
 75 |     |      *
 76 |     |      * Emits a {Transfer} event.
 77 |     |      */
 78 |     |     function transferFrom(address from, address to, uint256 value) external returns (bool);
 79 |     | }
 80 |     | 

/Users/gurkiratsingh/Desktop/Fuzzing Exercises/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)
  3 |     | 
  4 |     | pragma solidity ^0.8.20;
  5 |     | 
  6 |     | import {IERC20} from "../IERC20.sol";
  7 |     | 
  8 |     | /**
  9 |     |  * @dev Interface for the optional metadata functions from the ERC-20 standard.
 10 |     |  */
 11 |     | interface IERC20Metadata is IERC20 {
 12 |     |     /**
 13 |     |      * @dev Returns the name of the token.
 14 |     |      */
 15 |     |     function name() external view returns (string memory);
 16 |     | 
 17 |     |     /**
 18 |     |      * @dev Returns the symbol of the token.
 19 |     |      */
 20 |     |     function symbol() external view returns (string memory);
 21 |     | 
 22 |     |     /**
 23 |     |      * @dev Returns the decimals places of the token.
 24 |     |      */
 25 |     |     function decimals() external view returns (uint8);
 26 |     | }
 27 |     | 

/Users/gurkiratsingh/Desktop/Fuzzing Exercises/lib/openzeppelin-contracts/contracts/utils/Address.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | 
   3 |     | pragma solidity ^0.8.0;
   4 |     | 
   5 |     | /**
   6 |     |  * @dev Collection of functions related to the address type
   7 |     |  */
   8 |     | library Address {
   9 |     |     /**
  10 |     |      * @dev Returns true if `account` is a contract.
  11 |     |      *
  12 |     |      * [IMPORTANT]
  13 |     |      * ====
  14 |     |      * It is unsafe to assume that an address for which this function returns
  15 |     |      * false is an externally-owned account (EOA) and not a contract.
  16 |     |      *
  17 |     |      * Among others, `isContract` will return false for the following
  18 |     |      * types of addresses:
  19 |     |      *
  20 |     |      *  - an externally-owned account
  21 |     |      *  - a contract in construction
  22 |     |      *  - an address where a contract will be created
  23 |     |      *  - an address where a contract lived, but was destroyed
  24 |     |      * ====
  25 |     |      */
  26 | *   |     function isContract(address account) internal view returns (bool) {
  27 |     |         // This method relies on extcodesize, which returns 0 for contracts in
  28 |     |         // construction, since the code is only stored at the end of the
  29 |     |         // constructor execution.
  30 |     | 
  31 | *   |         uint256 size;
  32 |     |         assembly {
  33 | *   |             size := extcodesize(account)
  34 |     |         }
  35 | *   |         return size > 0;
  36 |     |     }
  37 |     | 
  38 |     |     /**
  39 |     |      * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
  40 |     |      * `recipient`, forwarding all available gas and reverting on errors.
  41 |     |      *
  42 |     |      * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
  43 |     |      * of certain opcodes, possibly making contracts go over the 2300 gas limit
  44 |     |      * imposed by `transfer`, making them unable to receive funds via
  45 |     |      * `transfer`. {sendValue} removes this limitation.
  46 |     |      *
  47 |     |      * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
  48 |     |      *
  49 |     |      * IMPORTANT: because control is transferred to `recipient`, care must be
  50 |     |      * taken to not create reentrancy vulnerabilities. Consider using
  51 |     |      * {ReentrancyGuard} or the
  52 |     |      * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
  53 |     |      */
  54 | *   |     function sendValue(address payable recipient, uint256 amount) internal {
  55 | *   |         require(address(this).balance >= amount, "Address: insufficient balance");
  56 |     | 
  57 | *   |         (bool success, ) = recipient.call{value: amount}("");
  58 | *   |         require(success, "Address: unable to send value, recipient may have reverted");
  59 |     |     }
  60 |     | 
  61 |     |     /**
  62 |     |      * @dev Performs a Solidity function call using a low level `call`. A
  63 |     |      * plain `call` is an unsafe replacement for a function call: use this
  64 |     |      * function instead.
  65 |     |      *
  66 |     |      * If `target` reverts with a revert reason, it is bubbled up by this
  67 |     |      * function (like regular Solidity function calls).
  68 |     |      *
  69 |     |      * Returns the raw returned data. To convert to the expected return value,
  70 |     |      * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
  71 |     |      *
  72 |     |      * Requirements:
  73 |     |      *
  74 |     |      * - `target` must be a contract.
  75 |     |      * - calling `target` with `data` must not revert.
  76 |     |      *
  77 |     |      * _Available since v3.1._
  78 |     |      */
  79 |     |     function functionCall(address target, bytes memory data) internal returns (bytes memory) {
  80 |     |         return functionCall(target, data, "Address: low-level call failed");
  81 |     |     }
  82 |     | 
  83 |     |     /**
  84 |     |      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
  85 |     |      * `errorMessage` as a fallback revert reason when `target` reverts.
  86 |     |      *
  87 |     |      * _Available since v3.1._
  88 |     |      */
  89 |     |     function functionCall(
  90 |     |         address target,
  91 |     |         bytes memory data,
  92 |     |         string memory errorMessage
  93 |     |     ) internal returns (bytes memory) {
  94 |     |         return functionCallWithValue(target, data, 0, errorMessage);
  95 |     |     }
  96 |     | 
  97 |     |     /**
  98 |     |      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
  99 |     |      * but also transferring `value` wei to `target`.
 100 |     |      *
 101 |     |      * Requirements:
 102 |     |      *
 103 |     |      * - the calling contract must have an ETH balance of at least `value`.
 104 |     |      * - the called Solidity function must be `payable`.
 105 |     |      *
 106 |     |      * _Available since v3.1._
 107 |     |      */
 108 | *   |     function functionCallWithValue(
 109 |     |         address target,
 110 |     |         bytes memory data,
 111 |     |         uint256 value
 112 | *   |     ) internal returns (bytes memory) {
 113 | *   |         return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
 114 |     |     }
 115 |     | 
 116 |     |     /**
 117 |     |      * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
 118 |     |      * with `errorMessage` as a fallback revert reason when `target` reverts.
 119 |     |      *
 120 |     |      * _Available since v3.1._
 121 |     |      */
 122 | *   |     function functionCallWithValue(
 123 |     |         address target,
 124 |     |         bytes memory data,
 125 |     |         uint256 value,
 126 |     |         string memory errorMessage
 127 | *   |     ) internal returns (bytes memory) {
 128 | *   |         require(address(this).balance >= value, "Address: insufficient balance for call");
 129 | *   |         require(isContract(target), "Address: call to non-contract");
 130 |     | 
 131 | *   |         (bool success, bytes memory returndata) = target.call{value: value}(data);
 132 | *   |         return verifyCallResult(success, returndata, errorMessage);
 133 |     |     }
 134 |     | 
 135 |     |     /**
 136 |     |      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
 137 |     |      * but performing a static call.
 138 |     |      *
 139 |     |      * _Available since v3.3._
 140 |     |      */
 141 |     |     function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
 142 |     |         return functionStaticCall(target, data, "Address: low-level static call failed");
 143 |     |     }
 144 |     | 
 145 |     |     /**
 146 |     |      * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
 147 |     |      * but performing a static call.
 148 |     |      *
 149 |     |      * _Available since v3.3._
 150 |     |      */
 151 |     |     function functionStaticCall(
 152 |     |         address target,
 153 |     |         bytes memory data,
 154 |     |         string memory errorMessage
 155 |     |     ) internal view returns (bytes memory) {
 156 |     |         require(isContract(target), "Address: static call to non-contract");
 157 |     | 
 158 |     |         (bool success, bytes memory returndata) = target.staticcall(data);
 159 |     |         return verifyCallResult(success, returndata, errorMessage);
 160 |     |     }
 161 |     | 
 162 |     |     /**
 163 |     |      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
 164 |     |      * but performing a delegate call.
 165 |     |      *
 166 |     |      * _Available since v3.4._
 167 |     |      */
 168 |     |     function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
 169 |     |         return functionDelegateCall(target, data, "Address: low-level delegate call failed");
 170 |     |     }
 171 |     | 
 172 |     |     /**
 173 |     |      * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
 174 |     |      * but performing a delegate call.
 175 |     |      *
 176 |     |      * _Available since v3.4._
 177 |     |      */
 178 |     |     function functionDelegateCall(
 179 |     |         address target,
 180 |     |         bytes memory data,
 181 |     |         string memory errorMessage
 182 |     |     ) internal returns (bytes memory) {
 183 |     |         require(isContract(target), "Address: delegate call to non-contract");
 184 |     | 
 185 |     |         (bool success, bytes memory returndata) = target.delegatecall(data);
 186 |     |         return verifyCallResult(success, returndata, errorMessage);
 187 |     |     }
 188 |     | 
 189 |     |     /**
 190 |     |      * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the
 191 |     |      * revert reason using the provided one.
 192 |     |      *
 193 |     |      * _Available since v4.3._
 194 |     |      */
 195 | *   |     function verifyCallResult(
 196 |     |         bool success,
 197 |     |         bytes memory returndata,
 198 |     |         string memory errorMessage
 199 | *   |     ) internal pure returns (bytes memory) {
 200 | *   |         if (success) {
 201 | *   |             return returndata;
 202 |     |         } else {
 203 |     |             // Look for revert reason and bubble it up if present
 204 | *   |             if (returndata.length > 0) {
 205 |     |                 // The easiest way to bubble the revert reason is using memory via assembly
 206 |     | 
 207 |     |                 assembly {
 208 |     |                     let returndata_size := mload(returndata)
 209 |     |                     revert(add(32, returndata), returndata_size)
 210 |     |                 }
 211 |     |             } else {
 212 | *r  |                 revert(errorMessage);
 213 |     |             }
 214 |     |         }
 215 |     |     }
 216 |     | }
 217 |     | 

/Users/gurkiratsingh/Desktop/Fuzzing Exercises/lib/openzeppelin-contracts/contracts/utils/Context.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)
  3 |     | 
  4 |     | pragma solidity ^0.8.20;
  5 |     | 
  6 |     | /**
  7 |     |  * @dev Provides information about the current execution context, including the
  8 |     |  * sender of the transaction and its data. While these are generally available
  9 |     |  * via msg.sender and msg.data, they should not be accessed in such a direct
 10 |     |  * manner, since when dealing with meta-transactions the account sending and
 11 |     |  * paying for execution may not be the actual sender (as far as an application
 12 |     |  * is concerned).
 13 |     |  *
 14 |     |  * This contract is only required for intermediate, library-like contracts.
 15 |     |  */
 16 |     | abstract contract Context {
 17 |     |     function _msgSender() internal view virtual returns (address) {
 18 |     |         return msg.sender;
 19 |     |     }
 20 |     | 
 21 |     |     function _msgData() internal view virtual returns (bytes calldata) {
 22 |     |         return msg.data;
 23 |     |     }
 24 |     | 
 25 |     |     function _contextSuffixLength() internal view virtual returns (uint256) {
 26 |     |         return 0;
 27 |     |     }
 28 |     | }
 29 |     | 

/Users/gurkiratsingh/Desktop/Fuzzing Exercises/lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)
  3 |     | 
  4 |     | pragma solidity ^0.8.20;
  5 |     | 
  6 |     | /**
  7 |     |  * @dev Contract module that helps prevent reentrant calls to a function.
  8 |     |  *
  9 |     |  * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 10 |     |  * available, which can be applied to functions to make sure there are no nested
 11 |     |  * (reentrant) calls to them.
 12 |     |  *
 13 |     |  * Note that because there is a single `nonReentrant` guard, functions marked as
 14 |     |  * `nonReentrant` may not call one another. This can be worked around by making
 15 |     |  * those functions `private`, and then adding `external` `nonReentrant` entry
 16 |     |  * points to them.
 17 |     |  *
 18 |     |  * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,
 19 |     |  * consider using {ReentrancyGuardTransient} instead.
 20 |     |  *
 21 |     |  * TIP: If you would like to learn more about reentrancy and alternative ways
 22 |     |  * to protect against it, check out our blog post
 23 |     |  * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 24 |     |  */
 25 |     | abstract contract ReentrancyGuard {
 26 |     |     // Booleans are more expensive than uint256 or any type that takes up a full
 27 |     |     // word because each write operation emits an extra SLOAD to first read the
 28 |     |     // slot's contents, replace the bits taken up by the boolean, and then write
 29 |     |     // back. This is the compiler's defense against contract upgrades and
 30 |     |     // pointer aliasing, and it cannot be disabled.
 31 |     | 
 32 |     |     // The values being non-zero value makes deployment a bit more expensive,
 33 |     |     // but in exchange the refund on every call to nonReentrant will be lower in
 34 |     |     // amount. Since refunds are capped to a percentage of the total
 35 |     |     // transaction's gas, it is best to keep them low in cases like this one, to
 36 |     |     // increase the likelihood of the full refund coming into effect.
 37 | *   |     uint256 private constant NOT_ENTERED = 1;
 38 | *   |     uint256 private constant ENTERED = 2;
 39 |     | 
 40 |     |     uint256 private _status;
 41 |     | 
 42 |     |     /**
 43 |     |      * @dev Unauthorized reentrant call.
 44 |     |      */
 45 |     |     error ReentrancyGuardReentrantCall();
 46 |     | 
 47 |     |     constructor() {
 48 | *   |         _status = NOT_ENTERED;
 49 |     |     }
 50 |     | 
 51 |     |     /**
 52 |     |      * @dev Prevents a contract from calling itself, directly or indirectly.
 53 |     |      * Calling a `nonReentrant` function from another `nonReentrant`
 54 |     |      * function is not supported. It is possible to prevent this from happening
 55 |     |      * by making the `nonReentrant` function external, and making it call a
 56 |     |      * `private` function that does the actual work.
 57 |     |      */
 58 |     |     modifier nonReentrant() {
 59 | *   |         _nonReentrantBefore();
 60 |     |         _;
 61 | *   |         _nonReentrantAfter();
 62 |     |     }
 63 |     | 
 64 | *   |     function _nonReentrantBefore() private {
 65 |     |         // On the first call to nonReentrant, _status will be NOT_ENTERED
 66 | *   |         if (_status == ENTERED) {
 67 |     |             revert ReentrancyGuardReentrantCall();
 68 |     |         }
 69 |     | 
 70 |     |         // Any calls to nonReentrant after this point will fail
 71 | *   |         _status = ENTERED;
 72 |     |     }
 73 |     | 
 74 | *   |     function _nonReentrantAfter() private {
 75 |     |         // By storing the original value once again, a refund is triggered (see
 76 |     |         // https://eips.ethereum.org/EIPS/eip-2200)
 77 | *   |         _status = NOT_ENTERED;
 78 |     |     }
 79 |     | 
 80 |     |     /**
 81 |     |      * @dev Returns true if the reentrancy guard is currently set to "entered", which indicates there is a
 82 |     |      * `nonReentrant` function in the call stack.
 83 |     |      */
 84 |     |     function _reentrancyGuardEntered() internal view returns (bool) {
 85 |     |         return _status == ENTERED;
 86 |     |     }
 87 |     | }
 88 |     | 

/Users/gurkiratsingh/Desktop/Fuzzing Exercises/src/Exercise1/testToken.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.0;
  3 |     | 
  4 |     | import "./token.sol";
  5 |     | 
  6 |     | 
  7 |     | contract testToken is Token {
  8 |     | 
  9 |     |     // Token  public token;
 10 |     |     // User user;
 11 |     |     address user = msg.sender;
 12 |     |     constructor (){
 13 |     |         // token = new Token();
 14 |     |         // user  = new User();
 15 |     | 
 16 |     |         // token.transfer();
 17 |     |         // token.balances(user) = 10000;
 18 |     |         balances[user] = 10_000;
 19 |     |     }
 20 |     | 
 21 |     |     function echidna_test_Balances() public view returns(bool) {
 22 |     |         // assert(balances(user) <= 10000);
 23 |     |         return balances[user] <= 10000;
 24 |     |     }
 25 |     | }

/Users/gurkiratsingh/Desktop/Fuzzing Exercises/src/Exercise1/token.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.0;
  3 |     | 
  4 |     | contract Ownable {
  5 |     |     address public owner = msg.sender;
  6 |     | 
  7 |     |     modifier onlyOwner() {
  8 |     |         require(msg.sender == owner, "Ownable: Caller is not the owner.");
  9 |     |         _;
 10 |     |     }
 11 |     | }
 12 |     | 
 13 |     | contract Pausable is Ownable {
 14 |     |     bool private _paused;
 15 |     | 
 16 |     |     function paused() public view returns (bool) {
 17 |     |         return _paused;
 18 |     |     }
 19 |     | 
 20 |     |     function pause() public onlyOwner {
 21 |     |         _paused = true;
 22 |     |     }
 23 |     | 
 24 |     |     function resume() public onlyOwner {
 25 |     |         _paused = false;
 26 |     |     }
 27 |     | 
 28 |     |     modifier whenNotPaused() {
 29 |     |         require(!_paused, "Pausable: Contract is paused.");
 30 |     |         _;
 31 |     |     }
 32 |     | }
 33 |     | 
 34 |     | contract Token is Ownable, Pausable {
 35 |     |     mapping(address => uint256) public balances;
 36 |     | 
 37 |     |     function transfer(address to, uint256 value) public whenNotPaused {
 38 |     |         // unchecked to save gas
 39 |     |         // require(balances[msg.sender] >= value, "Insufficient balance");
 40 |     |         // @audit just remove the below unchecked one because it is causing and underflow issue or add above require statement
 41 |     |         // unchecked {
 42 |     |             balances[msg.sender] -= value;
 43 |     |             balances[to] += value;
 44 |     |         // }
 45 |     |     }
 46 |     | }

/Users/gurkiratsingh/Desktop/Fuzzing Exercises/src/Exercise2/testToken.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.0;
  3 |     | 
  4 |     | import "./token.sol";
  5 |     | 
  6 |     | // pause i called at deployment
  7 |     | // Remove Ownership
  8 |     | 
  9 |     | 
 10 |     | contract testToken is Token {
 11 |     | 
 12 |     |     // address constant USER_1 = 0x9876543210987654321098765432109876543210;
 13 |     |     constructor () {
 14 |     |         paused();
 15 |     |         owner = address(0);
 16 |     | 
 17 |     |     }
 18 |     | 
 19 |     |     // function echidna_test_cannot_be_unpaused() public view returns(bool) {
 20 |     |     //     return balances[USER_1] == 0;
 21 |     |     // }
 22 |     | 
 23 |     |     function echidna_unpause() public view returns(bool){
 24 |     |         return (paused() == true);
 25 |     |     }
 26 |     | }

/Users/gurkiratsingh/Desktop/Fuzzing Exercises/src/Exercise2/token.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.0;
  3 |     | 
  4 |     | contract Ownable {
  5 |     |     address public owner = msg.sender;
  6 |     |     // @audit To fix the bug we should only remove the below function  
  7 |     | 
  8 |     | 
  9 |     |     // function Owner() public {
 10 |     |     //     owner = msg.sender;
 11 |     |     // }
 12 |     | 
 13 |     |     modifier onlyOwner() {
 14 |     |         require(owner == msg.sender);
 15 |     |         _;
 16 |     |     }
 17 |     | }
 18 |     | 
 19 |     | contract Pausable is Ownable {
 20 |     |     bool private _paused;
 21 |     | 
 22 |     |     function paused() public view returns (bool) {
 23 |     |         return _paused;
 24 |     |     }
 25 |     | 
 26 |     |     function pause() public onlyOwner {
 27 |     |         _paused = true;
 28 |     |     }
 29 |     | 
 30 |     |     function resume() public onlyOwner {
 31 |     |         _paused = false;
 32 |     |     }
 33 |     | 
 34 |     |     modifier whenNotPaused() {
 35 |     |         require(!_paused, "Pausable: Contract is paused.");
 36 |     |         _;
 37 |     |     }
 38 |     | }
 39 |     | 
 40 |     | contract Token is Ownable, Pausable {
 41 |     |     mapping(address => uint256) public balances;
 42 |     | 
 43 |     |     function transfer(address to, uint256 value) public whenNotPaused {
 44 |     |         balances[msg.sender] -= value;
 45 |     |         balances[to] += value;
 46 |     |     }
 47 |     | }

/Users/gurkiratsingh/Desktop/Fuzzing Exercises/src/Exercise3/mintable.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.0;
  3 |     | 
  4 |     | import "./token.sol";
  5 |     | 
  6 |     | contract MintableToken is Token {
  7 |     |     int256 public totalMinted;
  8 |     |     int256 public totalMintable;
  9 |     | 
 10 |     |     constructor(int256 totalMintable_) {
 11 |     |         totalMintable = totalMintable_;
 12 |     |     }
 13 |     | 
 14 |     |     //@audit To prevent this type of bug, you must ensure that value is always within the valid range of int256 before performing the cast. Add an explicit check for value:
 15 |     | 
 16 |     |     // function mint(uint256 value) public onlyOwner {
 17 |     |     //     require(value <= uint256(type(int256).max), "Value exceeds int256 range");
 18 |     |     //     require(int256(value) + totalMinted <= totalMintable, "Mint exceeds total mintable tokens");
 19 |     | 
 20 |     |     //     totalMinted += int256(value);
 21 |     |     //     balances[msg.sender] += value;
 22 |     |     // }
 23 |     | 
 24 |     |     function mint(uint256 value) public onlyOwner {
 25 |     |         require(int256(value) + totalMinted < totalMintable);
 26 |     |         // require(value <=  uint256(type(int256).max) , "Value more than the int256 ");
 27 |     |         totalMinted += int256(value);
 28 |     | 
 29 |     |         balances[msg.sender] += value;
 30 |     |     }
 31 |     | 
 32 |     | }
 33 |     |     // @audit i think their are two invariant here
 34 |     |     // 1. will be that the balances of the mag.sender should never greater than totalMinted
 35 |     |     // 2. will be that the totalMintable > totalMinted 
 36 |     |     // 3. See if the user can mint more that what is the limit 

/Users/gurkiratsingh/Desktop/Fuzzing Exercises/src/Exercise3/testToken.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.0;
  3 |     | 
  4 |     | 
  5 |     | import "./mintable.sol";
  6 |     | 
  7 |     | contract testToken is MintableToken {
  8 |     | 
  9 |     |     // Create a scenario where echidna (tx.origin) becomes the owner of the contract at construction, and totalMintable is set to 10,000. Remember that Echidna needs a constructor without arguments.
 10 |     |     // Add a property to check if echidna can mint more than 10,000 tokens.
 11 |     |     // Once Echidna finds the bug, fix the issue, and re-try your property with Echidna.
 12 |     | 
 13 |     |     // @audit i think their are two invariant here
 14 |     |     // 1. will be that the balances of the msg.sender should never greater than totalMinted
 15 |     |     // 2. will be that the totalMintable > totalMinted 
 16 |     |     // 3. See if the user can mint more that what is the limit 
 17 |     | 
 18 |     |     address user = msg.sender;
 19 |     | 
 20 |     |     constructor () MintableToken(10000) {
 21 |     |         owner = user;
 22 |     |     }
 23 |     | 
 24 |     |     function echidna_user_can_mint_more_than_totalMintable() public view returns(bool) {
 25 |     |         // return totalMinted < 10000;
 26 |     |         return balances[msg.sender] <= 10_000;
 27 |     |     }
 28 |     |     // Below test could have been also performed bu the thing is than you should change the code in the mintable.sol
 29 |     |     // at line 29 --  balances[msg.sender] += value; to balances[owner] += value;
 30 |     |     // function echidna_bal_ofuser_not_greater_than_totalMinted() public view returns(bool){
 31 |     |     //     return int256(balances[owner]) == totalMinted;
 32 |     |     //     // return totalMinted <= totalMintable;
 33 |     |     // }
 34 |     | }

/Users/gurkiratsingh/Desktop/Fuzzing Exercises/src/Exercise3/token.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.0;
  3 |     | 
  4 |     | /// @notice The issues from exercise 1 and 2 are fixed.
  5 |     | 
  6 |     | contract Ownable {
  7 |     |     address public owner = msg.sender;
  8 |     | 
  9 |     |     modifier onlyOwner() {
 10 |     |         require(msg.sender == owner, "Ownable: Caller is not the owner.");
 11 |     |         _;
 12 |     |     }
 13 |     | }
 14 |     | 
 15 |     | contract Pausable is Ownable {
 16 |     |     bool private _paused;
 17 |     | 
 18 |     |     function paused() public view returns (bool) {
 19 |     |         return _paused;
 20 |     |     }
 21 |     | 
 22 |     |     function pause() public onlyOwner {
 23 |     |         _paused = true;
 24 |     |     }
 25 |     | 
 26 |     |     function resume() public onlyOwner {
 27 |     |         _paused = false;
 28 |     |     }
 29 |     | 
 30 |     |     modifier whenNotPaused() {
 31 |     |         require(!_paused, "Pausable: Contract is paused.");
 32 |     |         _;
 33 |     |     }
 34 |     | }
 35 |     | 
 36 |     | contract Token is Ownable, Pausable {
 37 |     |     mapping(address => uint256) public balances;
 38 |     | 
 39 |     |     function transfer(address to, uint256 value) public whenNotPaused {
 40 |     |         balances[msg.sender] -= value;
 41 |     |         balances[to] += value;
 42 |     |     }
 43 |     | }

/Users/gurkiratsingh/Desktop/Fuzzing Exercises/src/Exercise4/testToken.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.0;
  3 |     | 
  4 |     | import "./token.sol";
  5 |     | 
  6 |     | contract testToken is Token {
  7 |     |     
  8 |     |     function transfer(address to, uint256 value) public override{
  9 |     |         uint256 intialBalOfSender = balances[msg.sender];
 10 |     |         uint256 intialBalOfReciever = balances[to];
 11 |     |         super.transfer(to,value);
 12 |     |         assert(intialBalOfSender >= balances[msg.sender]);
 13 |     |         assert(intialBalOfReciever <= balances[to]);
 14 |     |     }
 15 |     | }

/Users/gurkiratsingh/Desktop/Fuzzing Exercises/src/Exercise4/token.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.0;
  3 |     | 
  4 |     | contract Ownable {
  5 |     |     address public owner = msg.sender;
  6 |     | 
  7 |     |     function transferOwnership(address newOwner) public onlyOwner {
  8 |     |         owner = newOwner;
  9 |     |     }
 10 |     | 
 11 |     |     modifier onlyOwner() {
 12 |     |         require(msg.sender == owner, "Ownable: Caller is not the owner.");
 13 |     |         _;
 14 |     |     }
 15 |     | }
 16 |     | 
 17 |     | contract Pausable is Ownable {
 18 |     |     bool private _paused;
 19 |     | 
 20 |     |     function paused() public view returns (bool) {
 21 |     |         return _paused;
 22 |     |     }
 23 |     | 
 24 |     |     function pause() public onlyOwner {
 25 |     |         _paused = true;
 26 |     |     }
 27 |     | 
 28 |     |     function resume() public onlyOwner {
 29 |     |         _paused = false;
 30 |     |     }
 31 |     | 
 32 |     |     modifier whenNotPaused() {
 33 |     |         require(!_paused, "Pausable: Contract is paused.");
 34 |     |         _;
 35 |     |     }
 36 |     | }
 37 |     | 
 38 |     | contract Token is Ownable, Pausable {
 39 |     | 
 40 |     |     mapping(address => uint256) public balances;
 41 |     | 
 42 |     |     function transfer(address to, uint256 value) public virtual whenNotPaused {
 43 |     |         // require(balances[msg.sender] >= value ,"Insuffcient balance") ;
 44 |     |         // @audit just remove the unchecked keyword or add reuiqre statement above to check underflow and overflow 
 45 |     |         // unchecked to save gas
 46 |     |         unchecked {
 47 |     |             balances[msg.sender] -= value;
 48 |     |             balances[to] += value;
 49 |     |         }
 50 |     |     }
 51 |     | }
 52 |     | 
 53 |     | // @audit here there could be underflow issue for line 44,45
 54 |     | // msg.sender must have its initial balance or less.
 55 |     | // to must have its initial balance or more.

/Users/gurkiratsingh/Desktop/Fuzzing Exercises/src/Exercise5/EchidnaNaiveReciever.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | 
  3 |     | pragma solidity ^0.8.0;
  4 |     | 
  5 |     | import "./FlashLoanReceiver.sol";
  6 |     | import "./NaiveReceiverLenderPool.sol";
  7 |     | import "@openzeppelin/contracts/utils/Address.sol";
  8 |     | 
  9 | *   | contract EchidnaNaiveReciever {
 10 |     | 
 11 |     |     using Address for address payable;
 12 |     | 
 13 |     |     NaiveReceiverLenderPool  naiveReceiverLenderPool;
 14 |     |     FlashLoanReceiver  flashLoanReceiver ;
 15 |     | 
 16 | *   |     uint256 public poolBalance = 1000 ether;
 17 | *   |     uint256 public userBalance = 10 ether;
 18 |     | 
 19 |     |     // the lender pool should have 1000 eth of bal 
 20 |     |     // The flashloan reciever also has a bal
 21 |     |     constructor() payable {
 22 | *   |         naiveReceiverLenderPool = new NaiveReceiverLenderPool();
 23 | *   |         payable(address(naiveReceiverLenderPool)).sendValue(poolBalance);
 24 | *   |         flashLoanReceiver = new FlashLoanReceiver(payable(address(naiveReceiverLenderPool)));
 25 |     | 
 26 |     |         // address(this).balance = 2000 ether;
 27 |     |         // naiveReceiverLenderPool.receive(poolBalance);
 28 |     |         // (bool success,) = payable(address(naiveReceiverLenderPool)).call{value: poolBalance}("");
 29 |     |         // require(success, "Failed to fund the pool");
 30 |     | 
 31 |     |         // (success, ) = payable(address(flashLoanReceiver)).call{value: userBalance}("");
 32 |     |         // require(success, "Failed to fund the flash loan receiver");
 33 |     | 
 34 |     |         
 35 | *   |         payable(address(flashLoanReceiver)).sendValue(userBalance);
 36 |     | 
 37 |     |     }
 38 |     | 
 39 |     |     // function echidna_test_flashloan_fail() public returns(bool) {
 40 |     |     //     naiveReceiverLenderPool.flashLoan(address(flashLoanReceiver),10 ether);
 41 |     |     //     return true;
 42 |     |     // }
 43 |     | 
 44 |     |     function echidna_test_flashloan_fail_dynamic() public view returns(bool) {
 45 |     |         // naiveReceiverLenderPool.flashLoan(address(flashLoanReceiver),amount);
 46 |     |         
 47 |     |         return address(flashLoanReceiver).balance >= 10 ether;
 48 |     |     }
 49 |     | 
 50 |     | }
 51 |     | 
 52 |     | 

/Users/gurkiratsingh/Desktop/Fuzzing Exercises/src/Exercise5/FlashLoanReceiver.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | 
  3 |     | pragma solidity ^0.8.0;
  4 |     | 
  5 |     | import "@openzeppelin/contracts/utils/Address.sol";
  6 |     | 
  7 |     | /**
  8 |     |  * @title FlashLoanReceiver
  9 |     |  * @author Damn Vulnerable DeFi (https://damnvulnerabledefi.xyz)
 10 |     |  */
 11 | *r  | contract FlashLoanReceiver {
 12 |     |     using Address for address payable;
 13 |     | 
 14 |     |     address payable private pool;
 15 |     | 
 16 | *   |     constructor(address payable poolAddress) {
 17 | *   |         pool = poolAddress;
 18 |     |     }
 19 |     | 
 20 |     |     // Function called by the pool during flash loan
 21 | *   |     function receiveEther(uint256 fee) public payable {
 22 | *r  |         require(msg.sender == pool, "Sender must be pool");
 23 |     | 
 24 | *   |         uint256 amountToBeRepaid = msg.value + fee;
 25 |     | 
 26 | *   |         require(address(this).balance >= amountToBeRepaid, "Cannot borrow that much");
 27 |     |         
 28 | *   |         _executeActionDuringFlashLoan();
 29 |     |         
 30 |     |         // Return funds to pool
 31 | *   |         pool.sendValue(amountToBeRepaid);
 32 |     |     }
 33 |     | 
 34 |     |     // Internal function where the funds received are used
 35 | *   |     function _executeActionDuringFlashLoan() internal { }
 36 |     | 
 37 |     |     // Allow deposits of ETH
 38 |     |     receive () external payable {}
 39 |     | }

/Users/gurkiratsingh/Desktop/Fuzzing Exercises/src/Exercise5/NaiveReceiverLenderPool.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.0;
  3 |     | 
  4 |     | import "@openzeppelin/contracts/utils/ReentrancyGuard.sol";
  5 |     | import "@openzeppelin/contracts/utils/Address.sol";
  6 |     | 
  7 |     | /**
  8 |     |  * @title NaiveReceiverLenderPool
  9 |     |  * @author Damn Vulnerable DeFi (https://damnvulnerabledefi.xyz)
 10 |     |  */
 11 | *r  | contract NaiveReceiverLenderPool is ReentrancyGuard {
 12 |     | 
 13 |     |     using Address for address;
 14 |     | 
 15 | *   |     uint256 private constant FIXED_FEE = 1 ether; // not the cheapest flash loan
 16 |     | 
 17 | *   |     function fixedFee() external pure returns (uint256) {
 18 | *   |         return FIXED_FEE;
 19 |     |     }
 20 |     | 
 21 | *   |     function flashLoan(address borrower, uint256 borrowAmount) external nonReentrant {
 22 |     | 
 23 | *   |         uint256 balanceBefore = address(this).balance;
 24 | *r  |         require(balanceBefore >= borrowAmount, "Not enough ETH in pool");
 25 |     | 
 26 |     | 
 27 | *r  |         require(borrower.isContract(), "Borrower must be a deployed contract");
 28 |     |         // Transfer ETH and handle control to receiver
 29 | *   |         borrower.functionCallWithValue(
 30 | *   |             abi.encodeWithSignature(
 31 |     |                 "receiveEther(uint256)",
 32 |     |                 FIXED_FEE
 33 |     |             ),
 34 | *   |             borrowAmount
 35 |     |         );
 36 |     |         
 37 | *   |         require(
 38 | *   |             address(this).balance >= balanceBefore + FIXED_FEE,
 39 |     |             "Flash loan hasn't been paid back"
 40 |     |         );
 41 |     |     }
 42 |     | 
 43 |     |     // Allow deposits of ETH
 44 |     |     receive () external payable {}
 45 |     | }
 46 |     | 

/Users/gurkiratsingh/Desktop/Fuzzing Exercises/src/Exercise6/CustomERC20.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | 
  3 |     | pragma solidity ^0.8.20;
  4 |     | 
  5 |     | 
  6 |     | import {ERC20} from "@openzeppelin/contracts/token/ERC20/ERC20.sol";
  7 |     | 
  8 |     | contract CustomERC20 is ERC20   {
  9 |     | 
 10 |     |     constructor() ERC20("damn","dd") {
 11 |     |         _mint(msg.sender,type(uint256).max);
 12 |     |     }
 13 |     | }

/Users/gurkiratsingh/Desktop/Fuzzing Exercises/src/Exercise6/DamnValuableToken.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | 
  3 |     | pragma solidity ^0.8.0;
  4 |     | 
  5 |     | import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
  6 |     | 
  7 |     | /**
  8 |     |  * @title DamnValuableToken
  9 |     |  * @author Damn Vulnerable DeFi (https://damnvulnerabledefi.xyz)
 10 |     |  */
 11 |     | contract DamnValuableToken is ERC20 {
 12 |     | 
 13 |     |     // Decimals are set to 18 by default in `ERC20`
 14 |     |     constructor() ERC20("DamnValuableToken", "DVT") {
 15 |     |         _mint(msg.sender, type(uint256).max);
 16 |     |     }
 17 |     | }

/Users/gurkiratsingh/Desktop/Fuzzing Exercises/src/Exercise6/EchidnaReciever.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | 
  3 |     | pragma solidity ^0.8.20;
  4 |     | 
  5 |     | import "./ReceiverUnstoppable.sol";
  6 |     | // import {ERC20} from "@openzeppelin/contracts/token/ERC20/ERC20.sol";
  7 |     | import "./DamnValuableToken.sol";
  8 |     | import "./UnstoppableLender.sol";
  9 |     | 
 10 |     | 
 11 |     | contract EchidnaReciever {
 12 |     | 
 13 |     |     address setOwner = msg.sender;
 14 |     |     IERC20 public damnValuableToken;
 15 |     |     ReceiverUnstoppable public receiverUnstoppable;
 16 |     |     UnstoppableLender public unstoppableLender;
 17 |     |     uint256 public INITIAL_BAL_In_POOL = 100000;
 18 |     |     uint256 public BAL_OF_USER = 100;
 19 |     |     uint256 balanceBefore ;
 20 |     | 
 21 |     |     constructor(){
 22 |     |         damnValuableToken = new DamnValuableToken();
 23 |     |         unstoppableLender = new UnstoppableLender(address(damnValuableToken));
 24 |     |         receiverUnstoppable = new ReceiverUnstoppable(address(unstoppableLender));
 25 |     | 
 26 |     |         damnValuableToken.approve(address(unstoppableLender), INITIAL_BAL_In_POOL);
 27 |     |         unstoppableLender.depositTokens(INITIAL_BAL_In_POOL);
 28 |     | 
 29 |     |         damnValuableToken.transfer(setOwner,BAL_OF_USER);
 30 |     |         balanceBefore = damnValuableToken.balanceOf(address(unstoppableLender));
 31 |     |     }
 32 |     | 
 33 |     |     function receiveTokens(address tokenAddress, uint256 amount) external {
 34 |     |         require(msg.sender == address(unstoppableLender), "Sender must be pool");
 35 |     |         // Return all tokens to the pool
 36 |     |         require(
 37 |     |             IERC20(tokenAddress).transfer(msg.sender, amount),
 38 |     |             "Transfer of tokens failed"
 39 |     |         );
 40 |     |     }
 41 |     | 
 42 |     |     function echidna_poolBal_is_always_equal_to_intialBal() public  returns(bool)  {
 43 |     |         // assert(unstoppableLender.poolBalance() == balanceBefore);
 44 |     |         // require(msg.sender == )
 45 |     |         unstoppableLender.flashLoan(10);
 46 |     |         // receiverUnstoppable.executeFlashLoan(10);
 47 |     |         return true;
 48 |     |     }
 49 |     | 
 50 |     | 
 51 |     | 
 52 |     | 
 53 |     | }
 54 |     | 

/Users/gurkiratsingh/Desktop/Fuzzing Exercises/src/Exercise6/ReceiverUnstoppable.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | 
  3 |     | pragma solidity ^0.8.17;
  4 |     | 
  5 |     | import "./UnstoppableLender.sol";
  6 |     | import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";
  7 |     | 
  8 |     | /**
  9 |     |  * @title ReceiverUnstoppable
 10 |     |  * @author Damn Vulnerable DeFi (https://damnvulnerabledefi.xyz)
 11 |     |  */
 12 |     | contract ReceiverUnstoppable {
 13 |     | 
 14 |     |     UnstoppableLender private immutable pool;
 15 |     |     address private immutable owner;
 16 |     | 
 17 |     |     constructor(address poolAddress) {
 18 |     |         pool = UnstoppableLender(poolAddress);
 19 |     |         owner = msg.sender;
 20 |     |     }
 21 |     | 
 22 |     |     // Pool will call this function during the flash loan
 23 |     |     function receiveTokens(address tokenAddress, uint256 amount) external {
 24 |     |         require(msg.sender == address(pool), "Sender must be pool");
 25 |     |         // Return all tokens to the pool
 26 |     |         require(IERC20(tokenAddress).transfer(msg.sender, amount), "Transfer of tokens failed");
 27 |     |     }
 28 |     | 
 29 |     |     function executeFlashLoan(uint256 amount) external {
 30 |     |         require(msg.sender == owner, "Only owner can execute flash loan");
 31 |     |         pool.flashLoan(amount);
 32 |     |     }
 33 |     | }

/Users/gurkiratsingh/Desktop/Fuzzing Exercises/src/Exercise6/UnstoppableLender.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | 
  3 |     | pragma solidity ^0.8.20;
  4 |     | 
  5 |     | import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";
  6 |     | import {ReentrancyGuard} from "@openzeppelin/contracts/utils/ReentrancyGuard.sol";
  7 |     | 
  8 |     | interface IReceiver {
  9 |     |     function receiveTokens(address tokenAddress, uint256 amount) external;
 10 |     | }
 11 |     | 
 12 |     | /**
 13 |     |  * @title UnstoppableLender
 14 |     |  * @author Damn Vulnerable DeFi (https://damnvulnerabledefi.xyz)
 15 |     |  */
 16 |     | contract UnstoppableLender is ReentrancyGuard {
 17 |     | 
 18 |     |     IERC20 public immutable damnValuableToken;
 19 |     |     uint256 public poolBalance;
 20 |     | 
 21 |     |     constructor(address tokenAddress) {
 22 |     |         require(tokenAddress != address(0), "Token address cannot be zero");
 23 |     |         damnValuableToken = IERC20(tokenAddress);
 24 |     |     }
 25 |     | 
 26 |     |     function depositTokens(uint256 amount) external nonReentrant {
 27 |     |         require(amount > 0, "Must deposit at least one token");
 28 |     |         // Transfer token from sender. Sender must have first approved them.
 29 |     |         damnValuableToken.transferFrom(msg.sender, address(this), amount);
 30 |     |         poolBalance = poolBalance + amount;
 31 |     |     }
 32 |     | 
 33 |     |     function flashLoan(uint256 borrowAmount) external nonReentrant {
 34 |     |         require(borrowAmount > 0, "Must borrow at least one token");
 35 |     | 
 36 |     |         uint256 balanceBefore = damnValuableToken.balanceOf(address(this));
 37 |     |         require(balanceBefore >= borrowAmount, "Not enough tokens in pool");
 38 |     | 
 39 |     |         // Ensured by the protocol via the `depositTokens` function
 40 |     |         assert(poolBalance == balanceBefore);
 41 |     |         
 42 |     |         damnValuableToken.transfer(msg.sender, borrowAmount);
 43 |     |         
 44 |     |         IReceiver(msg.sender).receiveTokens(address(damnValuableToken), borrowAmount);
 45 |     |         
 46 |     |         uint256 balanceAfter = damnValuableToken.balanceOf(address(this));
 47 |     |         require(balanceAfter >= balanceBefore, "Flash loan hasn't been paid back");
 48 |     |     }
 49 |     | }
 50 |     | 

