/Users/gurkiratsingh/Desktop/Fuzzing Exercises/src/Exercise3/mintable.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.0;
  3 |     | 
  4 |     | import "./token.sol";
  5 |     | 
  6 |     | contract MintableToken is Token {
  7 | *   |     int256 public totalMinted;
  8 | *   |     int256 public totalMintable;
  9 |     | 
 10 | *   |     constructor(int256 totalMintable_) {
 11 | *   |         totalMintable = totalMintable_;
 12 |     |     }
 13 |     | 
 14 |     |     //@audit To prevent this type of bug, you must ensure that value is always within the valid range of int256 before performing the cast. Add an explicit check for value:
 15 |     | 
 16 |     |     // function mint(uint256 value) public onlyOwner {
 17 |     |     //     require(value <= uint256(type(int256).max), "Value exceeds int256 range");
 18 |     |     //     require(int256(value) + totalMinted <= totalMintable, "Mint exceeds total mintable tokens");
 19 |     | 
 20 |     |     //     totalMinted += int256(value);
 21 |     |     //     balances[msg.sender] += value;
 22 |     |     // }
 23 |     | 
 24 | *   |     function mint(uint256 value) public onlyOwner {
 25 | *r  |         require(int256(value) + totalMinted < totalMintable);
 26 |     |         // require(value <=  uint256(type(int256).max) , "Value more than the int256 ");
 27 | *   |         totalMinted += int256(value);
 28 |     | 
 29 | *   |         balances[msg.sender] += value;
 30 |     |     }
 31 |     | 
 32 |     | }
 33 |     |     // @audit i think their are two invariant here
 34 |     |     // 1. will be that the balances of the mag.sender should never greater than totalMinted
 35 |     |     // 2. will be that the totalMintable > totalMinted 
 36 |     |     // 3. See if the user can mint more that what is the limit 

/Users/gurkiratsingh/Desktop/Fuzzing Exercises/src/Exercise3/testToken.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.0;
  3 |     | 
  4 |     | 
  5 |     | import "./mintable.sol";
  6 |     | 
  7 | *r  | contract testToken is MintableToken {
  8 |     | 
  9 |     |     // Create a scenario where echidna (tx.origin) becomes the owner of the contract at construction, and totalMintable is set to 10,000. Remember that Echidna needs a constructor without arguments.
 10 |     |     // Add a property to check if echidna can mint more than 10,000 tokens.
 11 |     |     // Once Echidna finds the bug, fix the issue, and re-try your property with Echidna.
 12 |     | 
 13 |     |     // @audit i think their are two invariant here
 14 |     |     // 1. will be that the balances of the msg.sender should never greater than totalMinted
 15 |     |     // 2. will be that the totalMintable > totalMinted 
 16 |     |     // 3. See if the user can mint more that what is the limit 
 17 |     | 
 18 | *   |     address user = msg.sender;
 19 |     | 
 20 | *   |     constructor () MintableToken(10000) {
 21 | *   |         owner = user;
 22 |     |     }
 23 |     | 
 24 |     |     // function echidna_user_can_mint_more_than_totalMintable() public view returns(bool) {
 25 |     |     //     // return totalMinted < 10000;
 26 |     |     //     return balances[msg.sender] <= 10_000;
 27 |     |     // }
 28 |     | 
 29 |     |     function echidna_bal_ofuser_not_greater_than_totalMinted() public view returns(bool){
 30 |     |         // return balances[msg.sender] <= totalMinted;
 31 |     |         return totalMinted <= totalMintable;
 32 |     |     }
 33 |     | }

/Users/gurkiratsingh/Desktop/Fuzzing Exercises/src/Exercise3/token.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.0;
  3 |     | 
  4 |     | /// @notice The issues from exercise 1 and 2 are fixed.
  5 |     | 
  6 |     | contract Ownable {
  7 | *   |     address public owner = msg.sender;
  8 |     | 
  9 |     |     modifier onlyOwner() {
 10 | *r  |         require(msg.sender == owner, "Ownable: Caller is not the owner.");
 11 |     |         _;
 12 |     |     }
 13 |     | }
 14 |     | 
 15 |     | contract Pausable is Ownable {
 16 |     |     bool private _paused;
 17 |     | 
 18 | *   |     function paused() public view returns (bool) {
 19 | *   |         return _paused;
 20 |     |     }
 21 |     | 
 22 | *   |     function pause() public onlyOwner {
 23 | *   |         _paused = true;
 24 |     |     }
 25 |     | 
 26 | *   |     function resume() public onlyOwner {
 27 | *   |         _paused = false;
 28 |     |     }
 29 |     | 
 30 |     |     modifier whenNotPaused() {
 31 | *r  |         require(!_paused, "Pausable: Contract is paused.");
 32 |     |         _;
 33 |     |     }
 34 |     | }
 35 |     | 
 36 |     | contract Token is Ownable, Pausable {
 37 | *   |     mapping(address => uint256) public balances;
 38 |     | 
 39 | *   |     function transfer(address to, uint256 value) public whenNotPaused {
 40 | *   |         balances[msg.sender] -= value;
 41 | *   |         balances[to] += value;
 42 |     |     }
 43 |     | }

